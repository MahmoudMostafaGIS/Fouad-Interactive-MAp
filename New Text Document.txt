<!DOCTYPE html>
<html>

<head>
    <title>Leaflet Interactive Map with GeoJSON</title>
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.7.1/dist/leaflet.css" />
    <style>
        #map {
            height: 600px;
            width: 100%;
        }

        .highlight {
            weight: 5;
            color: '#666';
            fillOpacity: 0.7;
        }

        .text-labels {
            background-color: white;
            padding: 2px;
            border-radius: 3px;
            text-align: center;
            font-size: 14px;
        }
    </style>
</head>

<body>
    <div id="map"></div>
    <script src="https://unpkg.com/leaflet@1.7.1/dist/leaflet.js"></script>
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
    <script>
        var map = L.map('map').setView([51.505, -0.09], 13); // Set to your preferred center and zoom level
        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
            attribution: 'Map data &copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
        }).addTo(map);

        // Function to set color based on a property
        function getColor(attributeValue) {
            // Adjust the conditions and colors to match your dataset
            return attributeValue > 0 ? '#800026' :
                attributeValue < 1 ? '#E31A1C' :
                    '#FED976';
        }

        // Style function for GeoJSON layer
        function style(feature) {
            return {
                fillColor: getColor(feature.properties.yourAttribute),
                weight: 2,
                opacity: 1,
                color: 'white',
                fillOpacity: 0.7
            };
        }

        // Highlight feature function
        function highlightFeature(e) {
            var layer = e.target;
            layer.setStyle({
                weight: 5,
                color: '#666',
                fillOpacity: 0.7
            });
            if (!L.Browser.ie && !L.Browser.opera && !L.Browser.edge) {
                layer.bringToFront();
            }
        }

        // Reset highlight
        function resetHighlight(e) {
            geojsonLayer.resetStyle(e.target);
        }

        // Define actions for each feature
        function onEachFeature(feature, layer) {
            layer.on({
                mouseover: highlightFeature,
                mouseout: resetHighlight,
                click: highlightFeature // You can add other actions here
            });
            if (feature.properties && feature.properties.popupContent) {
                layer.bindPopup(feature.properties.popupContent);
            }
        }

        // GeoJSON layer adding to the map with style and onEachFeature functions
        var geojsonLayer = L.geoJson(null, {
            style: style,
            onEachFeature: onEachFeature
        }).addTo(map);

        // Load GeoJSON from an external file
        $.getJSON('Geojson/Buildings.geojson', function (data) {
            geojsonLayer.addData(data);

            // Add text labels for features where a certain property is greater than 0
            L.geoJson(data, {
                filter: function (feature, layer) {
                    // Change 'numberProperty' to your specific property name
                    return feature.properties.Number > 0;
                },
                pointToLayer: function (feature, latlng) {
                    return L.marker(latlng, {
                        icon: L.divIcon({
                            className: 'text-labels',
                            html: feature.properties.Number.toString() // Ensure this is the property you want to display
                        })
                    });
                }
            }).addTo(map);
        });
    </script>
</body>

</html>